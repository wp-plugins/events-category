=== Events Category ===
Contributors: westonruter
Tags: events, calendar, posts
Tested up to: 2.3.2
Stable tag: trunk
Donate link: http://weston.ruter.net/donate/

Seamless event calendar solution which extends the basic WordPress functionality to enable future-dated posts
to be listed within the blog chronology when they are assigned to a particular post category. The a future-dated post's timestamp
is used as the time stamp. Upcoming events widget included; includes iCal feed. HTML output contains hCalendar, hCard, geo, and adr
microformats.

== Description ==

*Please donate to help me continue
improving this plugin if you see real potential or find great usefulness in it.*
**A couple of features, namely recurring events and event registration, require a lot
of effort to engineer, and I need support to complete them. Thanks!**

Seamless event calendar solution which extends the basic WordPress functionality to enable future-dated posts
to be listed within the blog chronology when they are assigned to a particular post category. The a future-dated post's timestamp
is used as the time stamp. Upcoming events widget included; includes iCal feed. HTML output contains hCalendar, hCard, geo, and adr
microformats.

= Quick Start =

1. Activate the plugin
1. Create new posts in the "Events" category
1. Add the Upcoming Events widget to the sidebar
1. *Recommended:* install [old_post_date](http://wordpress.org/extend/plugins/old-post-date/) plugin

= How it works =

WordPress is designed to serve posts arranged in a chronological order. Because of this
and because the post is such a fundamental building component of WordPress, it only makes
since that an Event Calendar solution for WordPress should take advantage of its core functionality.
At the most fundamental level, this plugin enables posts to be used as events by automatically publishing
any future-dated posts that reside inside of a specific category and its subcategories: this is the "Events Category".

Since events are merely future-dated posts, they may be browsed using WordPress's chronological archives.
Pretty permalinks to these event posts which contain the common year/month/day structure are intuatively
semantic: the URL to the event itself indicates the event's time. Since WordPress by default displays the future-most
posts first in a descending-chronological order, the behavior of the index pages under in the events category was changed.
A new query variable, <code>eventscategory-position</code>, is introduced which indicates the current position in the timeline.
When serving the root of a category, this query variable is set to "0", which means that the upcoming events will be shown in ascending order.
If there are more upcoming events than what is allowed to show per page, then there is a link generated with the usual <code>previous_posts_link()</code> (yes,
the name is unintuitive, but this is normal for WordPress). The second page of future events
would have <code>eventscategory-position</code> set to "1", and the third page "2", and so on.

If there are events that have already passed, they can be seen by clicking the link generated by <code>next_posts_link()</code>.
Unlike future events which are presented in ascending order, past events are presented in descending order. The first page of past
events has <code>eventscategory-position</code> set to "-1", the second page to "-2", and so on. Basically, all that
<code>eventscategory-position</code> does is it replaces the <code>paged</code> paramater, and conceptually it shifts the <code>paged</code> paramater.

As already mentioned, the landing page for the events category lists the next upcoming events, that is, the first page of future results.
When pretty permalinks are enabled, on the second page of future results, the URL would appear as <code>/category/events/future/2/</code>
(<code>/category/events/future/1/</code> and <code>/category/events/future/</code> and <code>/category/events/</code> all refer to the same
page of results where <code>eventscategory-position</code> is "0"). Likewise, on the first page of past events, the URL would appear as
<code>/category/events/past/</code> (<code>/category/events/past/1/</code> is equivalent where <code>eventscategory-position</code> is "-1");
the second page of past events would appear as <code>/category/events/past/2/</code> and so on.

Note that since all events are posts, the default posts page and feed will filter out all posts dated after the current time;
otherwise all of your future posts will fill the first pages of your results.

= Creating a new event =

Creating a new event is just creating a new post and assigning it to the "Events" category. You may rename this category to something else after
initially activiating the plugin. Once you select the "Events" category for the post, additional controls will appear asking for the necessary
information to create an event, including the start date-time and end-date time, and the location.

= Upcoming Events Widget =

Multiple upcoming events widgets may be added to your sidebar(s), and each one may be customized to show only certain categories of events,
to show a specified number of posts, to include the location, and to customize the date-time format and the address format.
The feed links will appear if you are showing only one category.

To turn the feed links into icons, put something like the following into your theme's style.css:

	.eventscategory_widget_upcoming {
		position:relative;
	}
	.eventscategory_widget_upcoming .feeds {
		position:absolute;
		top:0;
		right:0;
		width:60px; /*make this bigger if there are more than 2 icons */
	}
	
	.eventscategory_widget_upcoming .feeds .ical,
	.eventscategory_widget_upcoming .feeds .rss2 {
		float:right;
		width:16px;
		height:16px;
		background-repeat:no-repeat;
		margin:5px;
	}
	
	/* Following two rules are for MSIE <= 6; they could be placed in a separate CSS file loaded in MSIE by conditional comments */
	.eventscategory_widget_upcoming .feeds .ical {
		background-image:none;
		filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='/wp-content/plugins/events-category/images/ical.png', sizingMethod='scale');
	}
	.eventscategory_widget_upcoming .feeds .rss2 {
		background-image:none;
		filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='/wp-content/plugins/events-category/images/ical.png', sizingMethod='scale');
	}
	
	.eventscategory_widget_upcoming .feeds > .ical {
		background-image:url(../../plugins/events-category/images/ical.png);
	}
	.eventscategory_widget_upcoming .feeds > .rss2 {
		background-image:url(../../plugins/events-category/images/feed.png);
	}
	
	/* Hide the text content of the feed links since we have a background image */
	.eventscategory_widget_upcoming .feeds .ical .text,
	.eventscategory_widget_upcoming .feeds .rss2 .text {
		display:none;
	}
	/* Hide all of the feed links you don't care about */
	.eventscategory_widget_upcoming .feeds .rss,
	.eventscategory_widget_upcoming .feeds .atom,
	.eventscategory_widget_upcoming .feeds .rdf {
		display:none;
	}

= Template Tags and Data Formatting =

The following template tags are introduced:

* <code>eventscategory_get_the_time($dt_format = '')</code> -- prints the time 
* <code>eventscategory_the_time($dt_format = '')</code> -- echos the preceding function
* <code>eventscategory_get_the_location($before = '', $after = '', $adr_format = '')</code> -- if no location is provided, nothing is returned
* <code>eventscategory_the_location($before = '', $after = '', $adr_format = '')</code> -- echos the preceding function

The <code>$dt_format</code> (date-time format) is a hybrid version of the format accepted by PHP's date() function.
Format characters which are enclosed in brackets are removed (along with other characters) if their presence adds no new information.
See the following example date format; the event end date-time is enclosed in curly brackets, in which the first square-bracketted string
is the separator between the two date-times:

	F jS, [Y @] g[:i][a]{[ - ][F ][j][S, ][Y,] g[:i]a} T

The <code>$adr_format</code> (address format) is a string incorporating adr microformat class names:

	[%street-address%]\n[%extended-address%]\n[%locality%][, %region%][ %postal-code%]\n[%country-name%]

The HTML output from these functions is tagged using hCalendar, hCard, geo, and adr microformats.
The default format strings used by these functions can be modified via the Upcoming Events widget configuration,
or via the main Events Category options page; the formats modified in these sections are independent of each other,
so you can use a more concise date format in the widget, but have a more verbose format when calling
<code>eventscategory_the_time()</code> elsewhere.

Included in the distribution is a JavaScript file "addGoogleMapsLinks.js"; if this is included, it
will insert links to view locations on Google Maps. You can include this file in your header.php file with something
like this:

	<script type="text/javascript" src="<?php bloginfo('siteurl'); echo '/' . PLUGINDIR; ?>/events-category/addGoogleMapsLinks.js"></script>


= Displaying Event List: Sample category.php Template =

You can determine if the user is currently seeing future posts if the query variable <code>eventscategory-position</code> is less than zero.
If it is equal to zero then they are in the present time, meaning the next upcoming events are shown; if it greater than zero, then
some page of future events is being viewed. You may construct your category template to look something like as follows:

	<?php $isEventsCat = function_exists('is_events_category') && is_events_category(); ?>
	<?php if (have_posts()) : ?>
		<h2>
			<?php
			$category = get_category(get_query_var('cat'));
			$monthNames = array('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec');
			if(is_day()){
				echo $category->name . ' on ';
				echo get_query_var('day') . ' ';
				echo $monthNames[get_query_var('monthnum')-1] . ', ';
				echo get_query_var('year');
			}
			elseif(is_month()){
				echo $category->name . ' in ';
				echo $monthNames[get_query_var('monthnum')-1] . ' ';
				echo get_query_var('year');
			}
			elseif(is_year()){
				echo $category->name . ' in ';
				echo get_query_var('year');
			}
			elseif($isEventsCat){
				if(get_query_var('eventscategory-position') > 0)
					echo 'Further Upcoming ' . $category->name;
				elseif(get_query_var('eventscategory-position') < 0)
					echo 'Past ' . $category->name;
				else
					echo 'Upcoming ' . $category->name;
			}
			else {
				echo $category->name;
			}
			?>
		</h2>

		<div class="navigation">
			<div class="newer"><?php next_posts_link('&laquo; Older')  ?></div>
			<div class="older"><?php previous_posts_link('Newer &raquo;') ?></div>
		</div>
		<?php while (have_posts()) : the_post(); ?>
			<div class="post">
			
			<!-- Put post template tags here, i.e. from the single.php example below -->
			
			</div>

		<?php endwhile; ?>
	
	<?php elseif($isEventsCat): ?>
		<?php if(get_query_var('eventscategory-position') >= 0): ?>
			<h2>No further future events</h2>
			<?php next_posts_link('&laquo; Older Events') ?>
		<?php else: ?>
			<h2>No further past events</h2>
			<?php previous_posts_link('Future Entries &raquo;') ?>
		<?php endif; ?>
	<?php else : ?>
	
		<h2 class="pagetitle">Not Found</h2>
		<?php include (TEMPLATEPATH . '/searchform.php'); ?>
	
	<?php endif; ?>


= Displaying an Event: Sample single.php Template =

The following example includes hCalendar and other microformats if the post being viewed is an event.
Note that you can have the plugin extend the <code>the_content()</code> template tag so that
<code>eventscategory_the_time()</code> and <code>eventscategory_the_location()</code> are automatically
preprended to the actual post content (that is, the event description). This option includes an extra <code>div</code>
the 'vevent' which encapsulates the content and includes an extra hidden span which has the class of 'summary' to
so that microformat will get all of the available information. So the drawback of the auto-include event data option is
that the summary is included twice, and you have less control. If you want more control over
how the event data is output, you can turn off this option and code your single.php template something
like as follows:

	<?php $isEventsCat = function_exists('is_events_category') && is_events_category(get_the_category()) ?>
	<div class="post post-<?php the_ID(); if($isEventsCat) echo ' vevent'; ?>">
		<h2><a class="<?php if($isEventsCat) echo ' summary' ?>" href="<?php echo get_permalink() ?>" rel="bookmark" title="Permanent Link: <?php the_title_attribute(); ?>"><?php the_title(); ?></a></h2>
		<?php if($isEventsCat): ?>
			<p>
				<strong>When:</strong> <?php eventscategory_the_time() ?>
			</p>
			<?php eventscategory_the_location('<strong>Where:</strong>') ?>
		<?php endif; ?>
		<div class="entry">
			<div class="<?php if($isEventsCat) echo ' description' ?>">
			<?php the_content('<p class="serif">Read the rest of this entry &raquo;</p>'); ?>
			</div>
		</div>
	</div>



= Changelog =
*2008-02-??: 0.2*
* Improved rewrite-rule generation
* Improved documentation
* Included addGoogleMapsLinks.js (see documentation)
* Improved the saving of the start date
* Timezone specifier can now be specified to reflect what is set in gmt_offset
* Released [old_post_date](http://wordpress.org/extend/plugins/old-post-date/) plugin
* Removed use of PHP5-only function json_encode()
* Fixed issue in displaying timezone where <code>get_the_time()</code> was being called with default parameter when the timezone format string is empty
* Updated category template example.

* Add configuration page to modify the options
	* Option to automatically prepend the location to the_content, in both is_feed() and !is_feed()
	* Option to prepend the time to the_content in both is_feed() and !is_feed()
	* Prepended data in the_content includes hCalendar microformats
	* Option to prepend a date format to the titles in non-iCal feeds
	* Change the default format to be used by the datetime and location template tag functions

*2008-02-13: 0.1 (beta)*

* <code>is_events_category()</code> now accepts arrays of category IDs or category objects so that <code>is_events_category(get_the_category())</code> can be used in the single.php template.
* Future events posts now no longer appear on the default posts page nor in the main posts feed.
* Event feeds (RSS2 and iCal) are now automatically added to each page.
* Event location in iCal feed has been improved

*2008-02-12: 0.1 (alpha)*

* Initial version released

= Todo =
1. Seconds should be forbidden in the format, because if the minutes are hidden, the seconds will look like minutes? Or we can only remove the [i] if the [s] is 0
1. Tabbing among the events category tabs needs to be resolved (hitting tab from title should go to the start date)
1. Javascript validation of data needed, including ensuring that second date and time should maintain diff from first when the first is modified
1. ??Category count is broken in Manage Categories page as well as Posts Manage page: Category post count incorrect when in admin managing posts
1. Timezones and daylight savings time
	1. Setting time at the beginning and end of daylight savings time is buggy.
	1. Start and end date-time microformats not currently working with daylight savings time
	1. Should we automatically change gmt_offset when DST starts or ends? We could just do set_option(gmt_offset, date('Z')/3600) after 
	1. We should always use gmt_post_date - post_date to get the gmt_offset; when saving a post in daylight savings, we'll add/subtract subtract one from gmt_offset
	1. Should we be able to specify the timezone that the user is in? with putenv(TZ=) or date_default_timezone_set()
	1. Verify conversions: from browser form to PHP handler to database to the_time and finally back to the browser form again; verify consistency and validity for timezones and DST
	1. SOLUTION: Allow user to set the offset each time, and upon save_post, change the gmt_post_date to correspond to the user-defined offset
	1. save event-gmt-offset in postmeta
	1. Present a list of all timezones/offsets for which the user's timezone is automatically selected
	1. Client-logic determines whether the start or end-date are DST: problem: how will server know when DST? If we have
	   the start time the gmt_date (start - gmt-offset), how do we determine if start time + duration is DST or not DST?
1. Add external iCal feeds to display
	1. Be able to assign all posts in a feed to a category
	1. Note that we need to store in postmeta the post-event's source feed and unique identifier
	1. Do iCal feeds generally keep all feeds from all time? If not, then how do we know when an event was deleted or just stopped from being shown?
	1. Disable comments for imported feeds?
	1. Disable editing/deleting of imported events
	1. Who should be assigned as the author of these imported posts? By default: admin; but provide drop down to choose
1. Add 'category' field to microformat... <span class="category"><?php the_category() ?></span>
1. **Significant feature:** Recurring Events
	1. Once recurring events are supported, we'll have to modify the post-lists in Manage Posts to make them more navigable
1. ??Option to filter the_time to include the beginning and end dates, that is, the results from eventscategory_the_time... and include the format specified
1. Localize in Japanese
1. **Significant feature:** Event Registration
	1. Add support for keeping track of attendees; RSVP status may be assigned by registered users via the comments form: http://microformats.org/wiki/hcalendar-brainstorming
	1. iCal feed should include this registrant data
